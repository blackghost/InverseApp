{ safe_quotes_on }
{ PLOT_FILE_1 = "../preStatic.dat" }
{ PLOT_FILE_2 = "../preDynamic42.dat" }
{ PLOT_FILE_3 = "../preDynamic21.dat" }
{ PLOT_FILE_4 = "../preDynamic41.dat" }
{ PLOT_FILE_5 = "../preDynamic11.dat" }
{ PLOT_FILE_6 = "../preDynamic22.dat" }
{ PLOT_FILE_7 = "../preDynamic31.dat" }
{ PLOT_FILE_8 = "../preDynamic32.dat" }
{ PLOT_FILE_9 = "../preDynamic51.dat" }
{ PLOT_FILE_10 = "../preDynamic52.dat" }
{ PLOT_FILE_11 = "../preDynamic12.dat" }
*Id("HyperWorks", "11.*")
*BeginPalette()
*EndPalette()
*BeginPage() // Page 1
    *IsActive()
    *Name("page1")
    *Title("{p1w1c1.orig_y.HWDatatype}-1", On)
    *TitleFont("Arial", 1, 0, 12)
    *Layout(15)
    *BeginAnimator(Transient)
        *CurrentTime(Undeformed)
        *StartTime(0,-60000)
        *EndTime(0,129240000)
        *Increment(Forward, Frame, 1, BounceOff)
    *EndAnimator()
    *WindowIDs(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
    *BeginWindow(Plot)         // Window 1
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w1c1.y.HWRequest} - {p1w1c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.18, 1400, 0.18, 1400)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.02)
                *Max(0.18)
                *Format(Auto)
                *Precision(5)
                *Tics(11)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w1c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(0)
                *Max(1400)
                *Format(Auto)
                *Precision(5)
                *Tics(8)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_5})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic11.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_5})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic11.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_4})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic41.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_5})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 3")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic11.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 3")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_5})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic11.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_4})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic41.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w1c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w1c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 54, 1)
                *Symbol(0, 54, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w1c3.x,p1w1c3.y,0,2500)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w1c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_4})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic41.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 38, 1)
                *Symbol(0, 38, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w1c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w1c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_4})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic41.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 2
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w2c1.y.HWRequest} - {p1w2c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.18, 1400, 0.18, 1400)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.02)
                *Max(0.18)
                *Format(Auto)
                *Precision(5)
                *Tics(11)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w2c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(0)
                *Max(1400)
                *Format(Auto)
                *Precision(5)
                *Tics(8)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_11})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic12.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_11})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic12.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_2})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic42.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_11})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 3")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic12.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 3")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_11})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic12.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_2})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic42.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w2c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w2c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_2})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic42.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w2c3.x,p1w2c3.y,0,2500)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w2c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_2})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic42.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w2c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w2c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_2})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic42.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 3
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w3c1.y.HWRequest} - {p1w3c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.14, 1400, 0.14, 1400)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.02)
                *Max(0.14)
                *Format(Auto)
                *Precision(5)
                *Tics(9)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w3c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(0)
                *Max(1400)
                *Format(Auto)
                *Precision(5)
                *Tics(8)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 3")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 3")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w3c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w3c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w1c3.x,p1w1c3.y,0,5000)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w3c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w3c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w3c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 4
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w4c1.y.HWRequest} - {p1w4c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.2, 1400, 0.2, 1400)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.02)
                *Max(0.2)
                *Format(Auto)
                *Precision(5)
                *Tics(12)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w4c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(0)
                *Max(1400)
                *Format(Auto)
                *Precision(5)
                *Tics(8)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_6})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic22.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_6})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic22.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_6})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic22.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_6})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 3")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic22.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 3")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_6})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic22.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_6})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic22.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w4c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w4c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w3c3.x,p1w3c3.y,0,5000)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w4c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_6})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic22.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w4c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w4c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_6})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic22.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 5
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w5c1.y.HWRequest} - {p1w5c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.25, 1400, 0.25, 1400)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.025)
                *Max(0.25)
                *Format(Auto)
                *Precision(5)
                *Tics(12)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w5c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(0)
                *Max(1400)
                *Format(Auto)
                *Precision(5)
                *Tics(8)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_7})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic31.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_7})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic31.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_7})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 3")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic31.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 3")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_7})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic31.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w5c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w5c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w4c3.x,p1w4c3.y,0,7500)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w5c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w5c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w5c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 6
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w6c1.y.HWRequest} - {p1w6c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.16, 1600, 0.16, 1600)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.02)
                *Max(0.16)
                *Format(Auto)
                *Precision(5)
                *Tics(10)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w6c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(0)
                *Max(1600)
                *Format(Auto)
                *Precision(5)
                *Tics(9)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_8})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic32.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_8})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic32.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_8})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 3")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic32.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 3")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_8})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic32.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w6c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w6c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w5c3.x,p1w5c3.y,0,7500)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w6c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w6c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w6c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 7
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w7c1.y.HWRequest} - {p1w7c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.3, 2000, 0.3, 2000)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.05)
                *Max(0.3)
                *Format(Auto)
                *Precision(5)
                *Tics(8)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w7c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(0)
                *Max(2000)
                *Format(Auto)
                *Precision(5)
                *Tics(11)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_4})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic41.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_4})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic41.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_4})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 3")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic41.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 3")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_4})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic41.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w7c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w7c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w7c3.x,p1w7c3.y,0,15000)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w7c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w7c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w7c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 8
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w8c1.y.HWRequest} - {p1w8c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.3, 2000, 0.3, 2000)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.05)
                *Max(0.3)
                *Format(Auto)
                *Precision(5)
                *Tics(8)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w8c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-200)
                *Max(2000)
                *Format(Auto)
                *Precision(5)
                *Tics(12)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_2})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic42.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_2})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic42.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_2})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 3")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic42.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 3")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_2})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic42.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w8c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w8c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w8c3.x,p1w8c3.y,0,18000)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w8c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w8c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w8c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 9
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w9c1.y.HWRequest} - {p1w9c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.3, 2000, 0.3, 2000)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.05)
                *Max(0.3)
                *Format(Auto)
                *Precision(5)
                *Tics(8)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w9c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-200)
                *Max(2000)
                *Format(Auto)
                *Precision(5)
                *Tics(12)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_9})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic51.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_9})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic51.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_9})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 3")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic51.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 3")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_9})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic51.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w9c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w9c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w8c3.x,p1w8c3.y,0,25000)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w9c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w9c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w9c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 10
        *IsActive()
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w10c1.y.HWRequest} - {p1w10c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(-0.00909091, 1602.3, 530.221, -2.57021e+007)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.05)
                *Max(0.4)
                *Format(Auto)
                *Precision(5)
                *Tics(10)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w10c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-2500)
                *Max(2500)
                *Format(Auto)
                *Precision(5)
                *Tics(11)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_10})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic52.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_10})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic52.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_10})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 3")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic52.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 3")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_10})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic52.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w10c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w10c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w10c3.x,p1w10c3.y,0,25000)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w10c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w10c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w10c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 11
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w11c1.y.HWRequest} - {p1w11c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.3, 2000, 0.3, 2000)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.05)
                *Max(0.3)
                *Format(Auto)
                *Precision(5)
                *Tics(8)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w11c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-200)
                *Max(2000)
                *Format(Auto)
                *Precision(5)
                *Tics(12)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w11c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w11c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w11c3.x,p1w11c3.y,0,30000)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w11c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w11c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w11c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *BeginWindow(Plot)         // Window 12
        *SaveDataInline(0)
        *BeginPlot()
            *PlotType(0)
            *BeginPlotHeader(On)
                *PrimaryFont("Arial", 0, 0, 14)
                *SecondaryFont("Arial", 0, 0, 10)
                *TertiaryFont("Arial", 0, 0, 10)
                *Color(0)
                *Text("{p1w12c1.y.HWRequest} - {p1w12c1.y.HWComponent}")
                *HeaderAlignment(2)
            *EndPlotHeader()
            *BeginLegend(On)
                *Font("Arial", 0, 0, 8)
                *BorderWidth(1)
                *Color(0)
                *Leader(Left)
                *Location(INSIDE)
                *Position(0.25, 2250, 0.25, 2250)
                *AutoPosition(False)
            *EndLegend()
            *UniformAspectRatio(0)
            *FrameColor(66)
            *BackgroundColor(1)
            *GridLineColor(9)
            *ZeroLineColor(0)
            *BeginAxis(X, "Primary", on)
                *Label("Column 1")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(-0.025)
                *Max(0.25)
                *Format(Auto)
                *Precision(5)
                *Tics(12)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginAxis(Y, "Primary", on)
                *Label("{p1w12c1.y.HWDatatype}")
                *Scale(Linear)
                *TicMethod(PerAxis)
                *Min(0)
                *Max(2250)
                *Format(Auto)
                *Precision(5)
                *Tics(10)
                *Grids(2)
                *Color(67)
                *AutoFit(TRUE)
                *LabelFont("Arial", 0, 0, 10)
                *TicsFont("Arial", 0, 0, 8)
            *EndAxis()
            *BeginCurve(On, "static")
                *Line(1, 22, 1)
                *Symbol(0, 22, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Unknown")
                    *Request("Block 1")
                    *Component("Column 2")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 2")
                *EndVector()
                *BeginVector(X, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_1})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preStatic.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-strain")
                *Line(1, 18, 1)
                *Symbol(0, 18, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "time-stress")
                *Line(1, 55, 1)
                *Symbol(0, 55, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
                *Attribute("HWCurveName2", "Curve Name", "String", "")
            *EndCurve()
            *BeginCurve(Off, "FFT")
                *Line(1, 46, 1)
                *Symbol(0, 46, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("FFTmag(p1w12c3.y,1)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 3")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("freq(p1w12c3.x)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(Off, "time-stress2")
                *Line(1, 50, 1)
                *Symbol(0, 50, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("batch(p1w12c3.x,p1w12c3.y,0,37000)")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w12c3.x")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
            *BeginCurve(On, "stress-strain")
                *Line(1, 24, 1)
                *Symbol(0, 24, 1)
                *Shade(False)
                *Bar(0, 0, 2)
                *ShowInLegend(True)
                *BeginVector(Y, Math)
                    *Expression("p1w12c5.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                *EndVector()
                *BeginVector(X, Math)
                    *Expression("p1w12c2.y")
                    *ScaleFactor("1")
                    *Offset(0)
                    *AxisIndex(1)
                    *Attribute("HWDatatype", "Datatype", "String", "Unknown")
                    *Attribute("HWRequest", "Request", "String", "Block 1")
                    *Attribute("HWComponent", "Component", "String", "Column 2")
                *EndVector()
                *BeginVector(Time, File)
                    *Filename({PLOT_FILE_3})
                    *Datatype("Column 1")
                    *ScaleFactor("1")
                    *Offset(0)
                    *Attribute("HWFile", "File", "String", "D:/Workplace/Inverse/Database/2012/DP980/preDynamic21.dat")
                    *Attribute("HWSolver", "Solver", "String", "Unkown")
                    *Attribute("HWDatatype", "Datatype", "String", "Column 1")
                    *Attribute("HWRequest", "Request", "String", "Column 1")
                    *Attribute("HWComponent", "Component", "String", "Column 1")
                    *Attribute("HWReader", "Reader", "String", "hgtextcolumn.exe")
                    *Attribute("HWComplexComponent", "ComplexComponent", "String", "Column 1")
                *EndVector()
            *EndCurve()
        *EndPlot()
    *EndWindow()
    *ActiveWindowExpanded()
    *TimeScales(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
    *TimeDelays(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
    *AnimationEnable(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
    *SyncTolerance(2e-008)
    *SyncTableGenerationPolicy(ALL_BLOCKS)
*EndPage()
{templex_off}
*BeginTemplexFunctions()
    *BeginTemplexFunction()
        *BeginText()
function sync2x(curve1x,curve2x)
{
if(numpts(curve1x)==numpts(curve2x) && abs(curve1x[0]-curve2x[0])<1e-4)
  newx=curve1x
  if(max(curve2x) < max(curve1x))
    newx=curve2x
  endif
else
  newx = max(cat(min(curve1x),min(curve2x))):min(cat(max(curve1x),max(curve2x))):(curve1x[1]-curve1x[0])
endif
return newx
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function sync3x(curve1x,curve2x,curve3x)
{
if(numpts(curve1x)==numpts(curve2x) && numpts(curve1x)==numpts(curve3x) && abs(curve1x[0]-curve2x[0])<1e-4 && abs(curve1x[0]-curve3x[0])<1e-4)
  newx = curve1x
  check=indexofmin(cat(max(curve1x),max(curve2x),max(curve3x)))
  if(check==0)
    newx = curve1x
  endif
  if(check==1)
    newx = curve2x
  endif
  if(check==2)
    newx = curve3x
  endif
else
  newx = max(cat(min(curve1x),min(curve2x),min(curve3x))):min(cat(max(curve1x),max(curve2x),max(curve3x))):(curve1x[1]-curve1x[0])
endif
return newx
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function lnfit(xvec,yvec)
{
coef = polyfit(ln(xvec),yvec,1,1)
a = coef[0]
b = coef[1]
return a+b*ln(xvec)
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function powfit(xvec,yvec)
{
coef = polyfit(ln(xvec),ln(yvec),1,1)
a = exp(coef[0])
b = coef[1]
return a*(xvec^b)
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function invfit(xvec,yvec)
{
coef = polyfit(xvec,(1/yvec),1,1)
a = coef[0]
b = coef[1]
return 1/(a+xvec*b)
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function raverage(yvec)
{
cnt=numpts(yvec)
sumt=array(cnt)
avgt=array(cnt)
sumt[0]=yvec[0]
avgt[0]=yvec[0]
for (i=1; i<cnt; i++)
  sumt[i]=yvec[i]+sumt[i-1]
  avgt[i]=sumt[i]/(i+1)
endloop
return avgt
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function rmedian(yvec)
{
cnt=numpts(yvec)
medt=array(cnt)
medt[0]=yvec[0]
for (i=1; i<cnt; i++)
  if(i%2==0)
    medt[i]=yvec[i/2]
  else
    medt[i] = (yvec[i/2-.5]+yvec[i/2+.5])/2
  endif
endloop
return medt
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function rmax(yvec)
{
cnt=numpts(yvec)
maxt=array(cnt)
maxt[0]=yvec[0]
for (i=1; i<cnt; i++)
   if(yvec[i]<maxt[i-1])
    maxt[i]=maxt[i-1]
   else
    maxt[i]=yvec[i]
   endif
endloop
return maxt
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function rmin(yvec)
{
cnt=numpts(yvec)
mint=array(cnt)
mint[0]=yvec[0]
for (i=1; i<cnt; i++)
   if(yvec[i]<mint[i-1])
    mint[i]=yvec[i]
   else
    mint[i]=mint[i-1]
   endif
endloop
return mint
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function rstddev(yvec)
{
cnt=numpts(yvec)
diffsqt=array(cnt)
sumt=array(cnt)
stddt=array(cnt)
avgt=raverage(yvec)
diffsqt[0]=(yvec[0]-avgt[0])^2
sumt[0]=diffsqt[0]
stddt[0]=0

for (i=1; i<cnt; i++) 
  diffsqt[i]=(yvec[i]-avgt[i])^2    
  sumt[i]=diffsqt[i]+sumt[i-1]
  stddt[i]=sqrt(sumt[i]/i)
endloop

return stddt
}


        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function tcheck(vx)
{
nm=numpts(vx)
deltat=(vx[nm-1]-vx[0])*1600
if (deltat > 1e5)
 return UNITS_NOT_IN_SECONDS
else
 return vx
endif
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function mirrorx(x)
{
    range = max(x)-min(x)
    return (min(x)-range):(max(x)+range):(range/(numpts(x)-1))
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function mirrory(y)
{
    return cat((y[(numpts(y)-1):1:-1]),y,(y[(numpts(y)-1):1:-1]))
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function divide(num, den)
{
    num_pts = numpts(den)
    res = array(num_pts)

    for ( i=0; i < num_pts; i++ )
        if ( den[i] )
           res[i] = num[i]/den[i]
        else
           res[i] = 0
        endif
    endloop
 return res
}

        *EndText()
    *EndTemplexFunction()
    *BeginTemplexFunction()
        *BeginText()
function trim_depvect(dep_vect,ind_vect)
{
  if(numpts(dep_vect) > numpts(ind_vect))
    result = dep_vect[0:(numpts(ind_vect)-1):1]
    return result
  else
    return dep_vect
  endif
}

        *EndText()
    *EndTemplexFunction()
*EndTemplexFunctions()
{templex_on}
{templex_off}
*BeginPlotMacros()
    *DefinePlotMacro(macro_abso, curve)
        *Label("absolute")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "abs(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_absolute\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_deriv, curve)
        *Label("derivative")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "derivative(trim_depvect(curve.x,curve.y),curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_derivative\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_dint, curve)
        *Label("double integral")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "integral(trim_depvect(curve.x,curve.y),(integral(trim_depvect(curve.x,curve.y),curve.y)))")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_double_integral\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_int, curve)
        *Label("integral")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "integral(trim_depvect(curve.x,curve.y),curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_integral\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reverse, curve)
        *Label("reverse curve")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y[(numpts(curve.y)-1):0:-1]")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_reverse\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_square, curve)
        *Label("square")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_square\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_subr, curve, lowx, highx)
        *Label("window")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(lowx, "X start", SCALAR)
        *Parameter(highx, "X end  ", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x[subrange(curve.x,lowx,highx)]")
        *Set(Y, "curve.y[subrange(curve.x,lowx,highx)]")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_window_\" + lowx + \"_\" + highx")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_subint, curve, lowx, highx)
        *Label("window integral")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(lowx, "X start", SCALAR)
        *Parameter(highx, "X end  ", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x[subrange(curve.x,lowx,highx)]")
        *Set(Y, "integral(curve.x[subrange(curve.x,lowx,highx)],curve.y[subrange(curve.x,lowx,highx)])")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_window_\" + lowx + \"_\" + highx")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_zero, curve, lowx, highx, zero)
        *Label("zero portion of curve")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(lowx, "X start", SCALAR)
        *Parameter(highx, "X end  ", SCALAR)
        *Parameter(zero, "Y const", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "cat(lininterp(trim_depvect(x,curve.y),curve.y,min(trim_depvect(x,curve.y)):lowx:(x[1]-x[0])),zero+0*lininterp(trim_depvect(x,curve.y),curve.y,(lowx+(x[1]-x[0])):highx:(x[1]-x[0])),lininterp(trim_depvect(x,curve.y),curve.y,(highx+(x[1]-x[0])):max(trim_depvect(x,curve.y)):(x[1]-x[0])))")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_\" + lowx + \"_\" + highx + \"_Y=\" + zero")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_add2, curve1, curve2)
        *Label("add 2 curves")
        *Parameter(curve1, "Curve 1", CURVE)
        *Parameter(curve2, "Curve 2", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync2x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y))")
        *Set(Y, "lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,x)+lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x)")
        *Set(Y2, "")
        *Set(LABEL, "\"(\" + curve1.label + \")+(\" + curve2.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_avg2, curve1, curve2)
        *Label("average 2 curves")
        *Parameter(curve1, "Curve 1", CURVE)
        *Parameter(curve2, "Curve 2", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync2x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y))")
        *Set(Y, "(lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,x)+lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x))/2")
        *Set(Y2, "")
        *Set(LABEL, "\"AVG((\" + curve1.label + \"),(\" + curve2.label + \"))\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_div2, curve1, curve2)
        *Label("divide 2 curves")
        *Parameter(curve1, "Numerator", CURVE)
        *Parameter(curve2, "Denominator", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync2x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y))")
        *Set(Y, "lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,x)/lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x)")
        *Set(Y2, "")
        *Set(LABEL, "\"(\" + curve1.label + \")/(\" + curve2.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_divzero, curve_1, curve_2)
        *Label("divide 2 curves w/zero values")
        *Parameter(curve_1, "Numerator", CURVE)
        *Parameter(curve_2, "Denominator", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve_1.x")
        *Set(Y, "divide(curve_1.y,trim_depvect(curve_2.y,curve_1.y))")
        *Set(Y2, "")
        *Set(LABEL, "curve_1.label + \" / \" + curve_2.label")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_mult2, curve1, curve2)
        *Label("multiply 2 curves")
        *Parameter(curve1, "Curve 1", CURVE)
        *Parameter(curve2, "Curve 2", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync2x(trim_depvect(curve2.x,curve2.y),trim_depvect(curve2.x,curve2.y))")
        *Set(Y, "lininterp(trim_depvect(curve2.x,curve2.y),curve1.y,x)*lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x)")
        *Set(Y2, "")
        *Set(LABEL, "\"(\" + curve1.label + \")*(\" + curve2.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_res2, curve1, curve2)
        *Label("resultant 2 curves")
        *Parameter(curve1, "Curve 1", CURVE)
        *Parameter(curve2, "Curve 2", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync2x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y))")
        *Set(Y, "sqrt((lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,x)^2)+(lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x)^2))")
        *Set(Y2, "")
        *Set(LABEL, "\"RES((\" + curve1.label + \"),(\" + curve2.label + \"))\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sub2, curve1, curve2)
        *Label("subtract 2 curves")
        *Parameter(curve1, "Curve 1", CURVE)
        *Parameter(curve2, "Curve 2", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync2x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y))")
        *Set(Y, "lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,x)-lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x)")
        *Set(Y2, "")
        *Set(LABEL, "\"(\" + curve1.label + \")-(\" + curve2.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_add3, curve1, curve2, curve3)
        *Label("add 3 curves")
        *Parameter(curve1, "Curve 1", CURVE)
        *Parameter(curve2, "Curve 2", CURVE)
        *Parameter(curve3, "Curve 3", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync3x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y),trim_depvect(curve3.x,curve3.y))")
        *Set(Y, "lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,x)+lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x)+lininterp(trim_depvect(curve3.x,curve3.y),curve3.y,x)")
        *Set(Y2, "")
        *Set(LABEL, "\"(\" + curve1.label + \")+(\" + curve2.label + \")+(\" + curve3.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_avg3, curve1, curve2, curve3)
        *Label("average 3 curves")
        *Parameter(curve1, "Curve 1", CURVE)
        *Parameter(curve2, "Curve 2", CURVE)
        *Parameter(curve3, "Curve 3", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync3x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y),trim_depvect(curve3.x,curve3.y))")
        *Set(Y, "(lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,x)+lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x)+lininterp(trim_depvect(curve3.x,curve3.y),curve3.y,x))/3")
        *Set(Y2, "")
        *Set(LABEL, "\"AVG((\" + curve1.label + \"),(\" + curve2.label + \"),(\" + curve3.label + \"))\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_mult3, curve1, curve2, curve3)
        *Label("multiply 3 curves")
        *Parameter(curve1, "Curve 1", CURVE)
        *Parameter(curve2, "Curve 2", CURVE)
        *Parameter(curve3, "Curve 3", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync3x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y),trim_depvect(curve3.x,curve3.y))")
        *Set(Y, "lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,x)*lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x)*lininterp(trim_depvect(curve3.x,curve3.y),curve3.y,x)")
        *Set(Y2, "")
        *Set(LABEL, "\"(\" + curve1.label + \")*(\" + curve2.label + \")*(\" + curve3.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_res3, curve1, curve2, curve3)
        *Label("resultant 3 curves")
        *Parameter(curve1, "Curve 1", CURVE)
        *Parameter(curve2, "Curve 2", CURVE)
        *Parameter(curve3, "Curve 3", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync3x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y),trim_depvect(curve3.x,curve3.y))")
        *Set(Y, "sqrt(lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,x)^2+lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x)^2+lininterp(trim_depvect(curve3.x,curve3.y),curve3.y,x)^2)")
        *Set(Y2, "")
        *Set(LABEL, "\"RES((\" + curve1.label + \"),(\" + curve2.label + \"),(\" + curve3.label + \"))\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_autoc, curve)
        *Label("auto correlation")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "0:(numpts(curve.x)-1):1")
        *Set(Y, "dcorr(curve.y,curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "\"(\" + curve.label + \")\" + \"acor\" + \"(\" + curve.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_crossc, curve1, curve2)
        *Label("cross correlation")
        *Parameter(curve1, "Curve1", CURVE)
        *Parameter(curve2, "Curve2", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "sync2x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y))")
        *Set(Y, "dcorr(lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,x),lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,x))")
        *Set(Y2, "")
        *Set(LABEL, "\"(\" + curve1.label + \")\" + \"xcor\" + \"(\" + curve2.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_norm, curve)
        *Label("normalize")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y/(max(abs(curve.y)))")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_norm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_xplot, curve1, scale1, curve2, scale2)
        *Label("cross plot")
        *Parameter(curve1, "CurveX (scaleX*Y -> X)", CURVE)
        *Parameter(scale1, "ScaleX", SCALAR)
        *Parameter(curve2, "CurveY (scaleY*Y -> Y)", CURVE)
        *Parameter(scale2, "ScaleY", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "scale1*lininterp(trim_depvect(curve1.x,curve1.y),curve1.y,sync2x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y)))")
        *Set(Y, "scale2*lininterp(trim_depvect(curve2.x,curve2.y),curve2.y,sync2x(trim_depvect(curve1.x,curve1.y),trim_depvect(curve2.x,curve2.y)))")
        *Set(Y2, "")
        *Set(LABEL, "curve1.label + \"_Xplot_\" + curve2.label")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_gint, curve, ivel, factor, convx)
        *Label("integral (g to mph)")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(ivel, "Initial Vel (mph)", SCALAR)
        *Parameter(factor, "Scale Factor (Y)", SCALAR)
        *Parameter(convx, "Conversion (X)", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "(ivel-(integral(trim_depvect(x,curve.y)*convx,curve.y)*21.93685))*factor")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_integral_mph\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_mphtog, curve, times, scale, convx)
        *Label("derivative (mph to g)")
        *Parameter(curve, "Curve (y=mph, x=msec)", CURVE)
        *Parameter(times, "Conversion Factor", SCALAR)
        *Parameter(scale, "Scale Factor", SCALAR)
        *Parameter(convx, "Conversion (X)", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "(scale/times)*derivative(trim_depvect(curve.x,curve.y)*convx,curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" derivative \"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_diint, curve, ivel, factor, togl, convx)
        *Label("double integral (g to inch)")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(ivel, "Initial Vel (mph)", SCALAR)
        *Parameter(factor, "Scale Factor (Y)", SCALAR)
        *Parameter(togl, "Zero disp. (0=off, 1=on)", SCALAR)
        *Parameter(convx, "Conversion (X)", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "factor*(integral(trim_depvect(x,curve.y)*convx,ivel-integral(trim_depvect(x,curve.y)*convx,curve.y)*21.93685)*17.6-togl*(integral(trim_depvect(x,curve.y)*convx,ivel-integral(trim_depvect(x,curve.y)*convx,curve.y)*21.93685)*17.6)[indexofmin(abs(x))])")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_double_integral_inch\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_durac, curve)
        *Label("continuous duration compression")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "duration(trim_depvect(curve.x,curve.y),-1*curve.y,0)")
        *Set(Y, "duration(trim_depvect(curve.x,curve.y),-1*curve.y,1)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_comp_duration\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_durat, curve)
        *Label("continuous duration tension")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "duration(trim_depvect(curve.x,curve.y),curve.y,0)")
        *Set(Y, "duration(trim_depvect(curve.x,curve.y),curve.y,1)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_tens_duration\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_batch, curve, low, high, times)
        *Label("batch general")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(low, "Low cutoff", SCALAR)
        *Parameter(high, "High cutoff", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "batch(times*trim_depvect(curve.x,curve.y),curve.y,low,high)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_\" + low + \"_\" + high")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_batchmir, curve, low, high, times)
        *Label("batch mirror")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(low, "Low Cutoff", SCALAR)
        *Parameter(high, "High Cutoff", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "batch(mirrorx(curve.x[0:(numpts(curve.y)-1):1])*times,mirrory(curve.y),low,high)[(indexofmin(abs(mirrorx(curve.x[0:(numpts(curve.y)-1):1])))):(indexofmin(abs(mirrorx(curve.x[0:(numpts(curve.y)-1):1])))+numpts(x)-1):1]")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_\" + low + \"_\" + high")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_batch_polyfit, curve, low, high, times, order)
        *Label("batch general with polyfit")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(low, "Low cutoff", SCALAR)
        *Parameter(high, "High cutoff", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(order, "Polyfit order", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "batchpolyfit(times*trim_depvect(curve.x,curve.y),curve.y,low,high,order)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_\" + low + \"_\" + high")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_batchmir_polyfit, curve, low, high, times, order)
        *Label("batch mirror with polyfit")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(low, "Low Cutoff", SCALAR)
        *Parameter(high, "High Cutoff", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(order, "Polyfit order", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "batchpolyfit(mirrorx(curve.x[0:(numpts(curve.y)-1):1])*times,mirrory(curve.y),low,high,order)[(indexofmin(abs(mirrorx(curve.x[0:(numpts(curve.y)-1):1])))):(indexofmin(abs(mirrorx(curve.x[0:(numpts(curve.y)-1):1])))+numpts(x)-1):1]")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_\" + low + \"_\" + high")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_butter, curve, freq, times)
        *Label("NHTSA Butterworth")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(freq, "Cut-off frequency", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "butterworth(times*trim_depvect(curve.x,curve.y),curve.y,freq)")
        *Set(Y2, "")
        *Set(LABEL, "\"NHTSA Butterworth(\" + curve.label + \")_\" + freq + \"Hz\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fir, curve, times)
        *Label("NHTSA FIR100")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "min(curve.x):max(curve.x):(.000625/times)")
        *Set(Y, "fir100(tcheck(times*curve.x),curve.y,1)")
        *Set(Y2, "")
        *Set(LABEL, "\"NHTSA FIR100(\" + curve.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_ir, curve, firc, irc)
        *Label("impulse response")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(firc, "FIR Coeff's", SCALAR)
        *Parameter(irc, "IR Coeff's", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "irfilter(curve.y,{firc},{irc})")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_irfilter\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae60, curve, times)
        *Label("SAE 60")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilter(times*trim_depvect(curve.x,curve.y),curve.y,60)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_SAE60\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae180, curve, times)
        *Label("SAE 180")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilter(times*trim_depvect(curve.x,curve.y),curve.y,180)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_SAE180\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae600, curve, times)
        *Label("SAE 600")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilter(times*trim_depvect(curve.x,curve.y),curve.y,600)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_SAE600\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae1000, curve, times)
        *Label("SAE 1000")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilter(times*trim_depvect(curve.x,curve.y),curve.y,1000)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_SAE1000\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae, curve, class, times)
        *Label("SAE general")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(class, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilter(times*trim_depvect(curve.x,curve.y),curve.y,class)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_SAE\" + class")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_saemir, curve, class, times)
        *Label("SAE mirror")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(class, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilter(mirrorx(trim_depvect(curve.x,curve.y))*times,mirrory(curve.y),class)[(indexofmin(abs(mirrorx(trim_depvect(curve.x,curve.y))))):(indexofmin(abs(mirrorx(trim_depvect(curve.x,curve.y))))+numpts(x)-1):1]")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_mirror_SAE\" + class")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_np_fwd, curve, cfc, times)
        *Label("SAE NP FWD")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,0,1)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (No Pad, Fwd)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_np_bck, curve, cfc, times)
        *Label("SAE NP BCK")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,0,2)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (No Pad, Back)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_np_fb, curve, cfc, times)
        *Label("SAE NP F-B")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,0,3)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (No Pad, Fwd-Back)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_np_bf, curve, cfc, times)
        *Label("SAE NP B-F")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,0,4)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (No Pad, Back-Fwd)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_zp_fwd, curve, cfc, times)
        *Label("SAE ZP FWD")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,-1,1)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (Zero Pad, Fwd)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_zp_bck, curve, cfc, times)
        *Label("SAE ZP BCK")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,-1,2)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (Zero Pad, Back)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_zp_fb, curve, cfc, times)
        *Label("SAE ZP F-B")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,-1,3)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (Zero Pad, Fwd-Back)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_zp_bf, curve, cfc, times)
        *Label("SAE ZP B-F")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,-1,4)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (Zero Pad, Back-Fwd)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_mp_fwd, curve, cfc, times)
        *Label("SAE MP FWD")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,1,1)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (Mirror Pad, Fwd)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_mp_bck, curve, cfc, times)
        *Label("SAE MP BCK")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,1,2)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (Mirror Pad, Back)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_mp_fb, curve, cfc, times)
        *Label("SAE MP F-B")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,1,3)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (Mirror Pad, Fwd-Back)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sae_mp_bf, curve, cfc, times)
        *Label("SAE MP B-F")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(cfc, "Filter class", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "saefilt95(trim_depvect(curve.x,curve.y)*times,curve.y,cfc,1,4)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC \" +cfc+ \" J211 (Mirror Pad, Back-Fwd)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_iso60, curve, times)
        *Label("ISO-CFC60")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "iso6487(times*trim_depvect(curve.x,curve.y),curve.y,60)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC 60 J211 (ISO6487)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_iso180, curve, times)
        *Label("ISO-CFC180")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "iso6487(times*trim_depvect(curve.x,curve.y),curve.y,180)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \" -- CFC 180 J211 (ISO6487)\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_1, curve, scale)
        *Label("convert ms to sec")
        *Parameter(curve, "Curve (x=ms)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:sec\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_2, curve, scale)
        *Label("convert ms to min")
        *Parameter(curve, "Curve (x=ms)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:min\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_3, curve, scale)
        *Label("convert ms to hour")
        *Parameter(curve, "Curve (x=ms)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:hour\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_4, curve, scale)
        *Label("convert sec to ms")
        *Parameter(curve, "Curve (x=sec)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:ms\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_5, curve, scale)
        *Label("convert sec to min")
        *Parameter(curve, "Curve (x=sec)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:min\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_6, curve, scale)
        *Label("convert sec to hour")
        *Parameter(curve, "Curve (x=sec)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:hour\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_7, curve, scale)
        *Label("convert min to ms")
        *Parameter(curve, "Curve (x=min)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:ms\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_8, curve, scale)
        *Label("convert min to sec")
        *Parameter(curve, "Curve (x=min)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:sec\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_9, curve, scale)
        *Label("convert min to hour")
        *Parameter(curve, "Curve (x=min)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:hour\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_10, curve, scale)
        *Label("convert hour to ms")
        *Parameter(curve, "Curve (x=hour)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:ms\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_11, curve, scale)
        *Label("convert hour to sec")
        *Parameter(curve, "Curve (x=hour)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:sec\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_t_12, curve, scale)
        *Label("convert hour to min")
        *Parameter(curve, "Curve (x=hour)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x*scale")
        *Set(Y, "curve.y")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_x:min\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_1, curve, scale)
        *Label("convert inch to mm")
        *Parameter(curve, "Curve (y=in)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_2, curve, scale)
        *Label("convert inch to cm")
        *Parameter(curve, "Curve (y=in)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:cm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_3, curve, scale)
        *Label("convert inch to meter")
        *Parameter(curve, "Curve (y=in)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:meter\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_4, curve, scale)
        *Label("convert inch to ft")
        *Parameter(curve, "Curve (y=in)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_5, curve, scale)
        *Label("convert inch to mile")
        *Parameter(curve, "Curve (y=in)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mile\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_6, curve, scale)
        *Label("convert ft to mm")
        *Parameter(curve, "Curve (y=ft)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_7, curve, scale)
        *Label("convert ft to cm")
        *Parameter(curve, "Curve (y=ft)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:cm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_8, curve, scale)
        *Label("convert ft to meter")
        *Parameter(curve, "Curve (y=ft)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:meter\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_9, curve, scale)
        *Label("convert ft to inch")
        *Parameter(curve, "Curve (y=ft)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:inch\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_10, curve, scale)
        *Label("convert ft to mile")
        *Parameter(curve, "Curve (y=ft)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mile\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_11, curve, scale)
        *Label("convert mile to mm")
        *Parameter(curve, "Curve (y=mile)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_12, curve, scale)
        *Label("convert mile to cm")
        *Parameter(curve, "Curve (y=mile)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:cm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_13, curve, scale)
        *Label("convert mile to meter")
        *Parameter(curve, "Curve (y=mile)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:meter\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_14, curve, scale)
        *Label("convert mile to inch")
        *Parameter(curve, "Curve (y=mile)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:inch\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_15, curve, scale)
        *Label("convert mile to ft")
        *Parameter(curve, "Curve (y=mile)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_16, curve, scale)
        *Label("convert mm to cm")
        *Parameter(curve, "Curve (y=mm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:cm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_17, curve, scale)
        *Label("convert mm to meter")
        *Parameter(curve, "Curve (y=mm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:meter\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_18, curve, scale)
        *Label("convert mm to inch")
        *Parameter(curve, "Curve (y=mm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:inch\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_19, curve, scale)
        *Label("convert mm to ft")
        *Parameter(curve, "Curve (y=mm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_20, curve, scale)
        *Label("convert mm to mile")
        *Parameter(curve, "Curve (y=mm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mile\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_21, curve, scale)
        *Label("convert cm to mm")
        *Parameter(curve, "Curve (y=cm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_22, curve, scale)
        *Label("convert cm to meter")
        *Parameter(curve, "Curve (y=cm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:meter\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_23, curve, scale)
        *Label("convert cm to inch")
        *Parameter(curve, "Curve (y=cm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:inch\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_24, curve, scale)
        *Label("convert cm to ft")
        *Parameter(curve, "Curve (y=cm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_25, curve, scale)
        *Label("convert cm to mile")
        *Parameter(curve, "Curve (y=cm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mile\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_26, curve, scale)
        *Label("convert meter to mm")
        *Parameter(curve, "Curve (y=meter)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_27, curve, scale)
        *Label("convert meter to cm")
        *Parameter(curve, "Curve (y=meter)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:cm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_28, curve, scale)
        *Label("convert meter to inch")
        *Parameter(curve, "Curve (y=meter)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:inch\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_29, curve, scale)
        *Label("convert meter to ft")
        *Parameter(curve, "Curve (y=meter)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_d_30, curve, scale)
        *Label("convert meter to mile")
        *Parameter(curve, "Curve (y=meter)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mile\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_1, curve, scale)
        *Label("convert ft/s to mph")
        *Parameter(curve, "Curve (y=ft/s)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mph\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_2, curve, scale)
        *Label("convert ft/s to kmh")
        *Parameter(curve, "Curve (y=ft/s)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:kmh\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_3, curve, scale)
        *Label("convert ft/s to m/s")
        *Parameter(curve, "Curve (y=ft/s)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:m/s\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_4, curve, scale)
        *Label("convert mph to ft/s")
        *Parameter(curve, "Curve (y=mph)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft/s\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_5, curve, scale)
        *Label("convert mph to kmh")
        *Parameter(curve, "Curve (y=mph)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:kmh\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_6, curve, scale)
        *Label("convert mph to m/s")
        *Parameter(curve, "Curve (y=mph)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:m/s\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_7, curve, scale)
        *Label("convert m/s to ft/s")
        *Parameter(curve, "Curve (y=m/s)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft/s\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_8, curve, scale)
        *Label("convert m/s to mph")
        *Parameter(curve, "Curve (y=m/s)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mph\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_9, curve, scale)
        *Label("convert m/s to kmh")
        *Parameter(curve, "Curve (y=m/s)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:kmh\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_10, curve, scale)
        *Label("convert kmh to ft/s")
        *Parameter(curve, "Curve (y=kmh)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft/s\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_11, curve, scale)
        *Label("convert kmh to mph")
        *Parameter(curve, "Curve (y=kmh)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:mph\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_v_12, curve, scale)
        *Label("convert kmh to m/s")
        *Parameter(curve, "Curve (y=kmh)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:m/s\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_a_1, curve, scale)
        *Label("convert ft/s/s to g")
        *Parameter(curve, "Curve (y=ft/s/s)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:g\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_a_2, curve, scale)
        *Label("convert ft/s/s to m/s/s")
        *Parameter(curve, "Curve (y=ft/s/s)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:m/s/s\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_a_3, curve, scale)
        *Label("convert g to ft/s/s")
        *Parameter(curve, "Curve (y=g)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft/s/s\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_a_4, curve, scale)
        *Label("convert g to m/s/s")
        *Parameter(curve, "Curve (y=g)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:m/s/s\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_a_5, curve, scale)
        *Label("convert m/s/s to g")
        *Parameter(curve, "Curve (y=m/s/s)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:g\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_a_6, curve, scale)
        *Label("convert m/s/s to ft/s/s")
        *Parameter(curve, "Curve (y=m/s/s)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft/s/s\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_1, curve, scale)
        *Label("convert N*m (Joule) to inch*lbf")
        *Parameter(curve, "Curve (y=N*m)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:inch*lbf\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_2, curve, scale)
        *Label("convert N*m (Joule) to ft*lbf")
        *Parameter(curve, "Curve (y=N*m)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft*lbf\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_3, curve, scale)
        *Label("convert N*m (Joule) to BTU")
        *Parameter(curve, "Curve (y=N*m)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:BTU\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_4, curve, scale)
        *Label("convert inch*lbf to N*m")
        *Parameter(curve, "Curve (y=inch*lbf)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:N*m\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_5, curve, scale)
        *Label("convert inch*lbf to ft*lbf")
        *Parameter(curve, "Curve (y=inch*lbf)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft*lbf\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_6, curve, scale)
        *Label("convert inch*lbf to BTU")
        *Parameter(curve, "Curve (y=inch*lbf)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:BTU\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_7, curve, scale)
        *Label("convert ft*lbf to N*m")
        *Parameter(curve, "Curve (y=ft*lbf)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:N*m\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_8, curve, scale)
        *Label("convert ft*lbf to inch*lbf")
        *Parameter(curve, "Curve (y=ft*lbf)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:inch*lbf\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_9, curve, scale)
        *Label("convert ft*lbf to BTU")
        *Parameter(curve, "Curve (y=ft*lbf)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:BTU\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_10, curve, scale)
        *Label("convert BTU to N*m")
        *Parameter(curve, "Curve (y=BTU)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:N*m\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_11, curve, scale)
        *Label("convert BTU to inch*lbf")
        *Parameter(curve, "Curve (y=BTU)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:inch*lbf\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_e_12, curve, scale)
        *Label("convert BTU to ft*lbf")
        *Parameter(curve, "Curve (y=BTU)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:ft*lbf\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_1, curve, scale)
        *Label("convert N to lbf")
        *Parameter(curve, "Curve (y=N)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:lbf\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_2, curve, scale)
        *Label("convert lbf to N")
        *Parameter(curve, "Curve (y=lbf)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:N\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_3, curve, scale)
        *Label("convert N/m/m (Pascal) to psi")
        *Parameter(curve, "Curve (y=N/m/m)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:psi\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_4, curve, scale)
        *Label("convert N/m/m (Pascal) to bar")
        *Parameter(curve, "Curve (y=N/m/m)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:bar\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_5, curve, scale)
        *Label("convert N/m/m (Pascal) to atm")
        *Parameter(curve, "Curve (y=N/m/m)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:atm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_6, curve, scale)
        *Label("convert psi to N/m/m")
        *Parameter(curve, "Curve (y=N/m/m)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:N/m/m\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_7, curve, scale)
        *Label("convert psi to bar")
        *Parameter(curve, "Curve (y=psi)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:bar\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_8, curve, scale)
        *Label("convert psi to atm")
        *Parameter(curve, "Curve (y=psi)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:atm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_9, curve, scale)
        *Label("convert bar to psi")
        *Parameter(curve, "Curve (y=bar)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:psi\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_10, curve, scale)
        *Label("convert bar to N/m/m")
        *Parameter(curve, "Curve (y=bar)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:N/m/m\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_11, curve, scale)
        *Label("convert bar to atm")
        *Parameter(curve, "Curve (y=bar)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:atm\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_12, curve, scale)
        *Label("convert atm to psi")
        *Parameter(curve, "Curve (y=atm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:psi\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_13, curve, scale)
        *Label("convert atm to bar")
        *Parameter(curve, "Curve (y=atm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:bar\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fp_14, curve, scale)
        *Label("convert atm to N/m/m")
        *Parameter(curve, "Curve (y=atm)", CURVE)
        *Parameter(scale, "Conversion Factor", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y*scale")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_y:N/m/m\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_clip, curve, window, times, accel)
        *Label("NHTSA clip")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(window, "Window (ms)", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(accel, "Accel conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "clip(curve.x*times,curve.y*accel,window,1)*0.001/times")
        *Set(Y, "clip(curve.x*times,curve.y*accel,window,2)")
        *Set(Y2, "")
        *Set(LABEL, "\"Clip(\" + curve.label + \",\" + window + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_clipn, curve, window, times, accel)
        *Label("NHTSA Clip note")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(window, "Window (ms)", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(accel, "Accel conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(false)
        *CreateNote(true)
        *BeginText()
{thisclip = clip(curve.x*times,curve.y*accel,window)}
Clip: {thisclip[0]}
Ts: {thisclip[1]}
Te: {thisclip[2]}






        *EndText()
        *Set(NOTE_POS, "curve.x[indexofmax(curve.y)]", "curve.y[indexofmax(curve.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Existing curve")
        *Set(NOTE_CURVE, "curve", "indexofmax(curve.y)")
    *EndDefine()
    *DefinePlotMacro(macro_gsi, curve, times, accel)
        *Label("GSI Curve")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(accel, "Accel conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "integral(curve.x*times,((accel*curve.y)^2.5))")
        *Set(Y2, "")
        *Set(LABEL, "\"GSI(\" + curve.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_gsin, curve, times, accel)
        *Label("GSI Note")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(accel, "Accel conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(false)
        *CreateNote(true)
        *BeginText()
GSI: {max(integral(curve.x*times,((accel*curve.y)^2.5)))}






        *EndText()
        *Set(NOTE_POS, "curve.x[indexofmax(curve.y)]", "curve.y[indexofmax(curve.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_hic, curve, window, times, accel)
        *Label("NHTSA HIC Curve")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(window, "Window (ms)", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(accel, "Accel conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "hic(curve.x*times,curve.y*accel,window,1)*0.001/times")
        *Set(Y, "hic(curve.x*times,curve.y*accel,window,2)")
        *Set(Y2, "")
        *Set(LABEL, "\"HIC(\" + curve.label + \",\" + window + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_hic_avg_accl, curve, window, times, accel)
        *Label("NHTSA HIC Avg. Accl. Curve")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(window, "Window (ms)", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(accel, "Accel conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "hic(curve.x*times,curve.y*accel,window,1)*0.001/times")
        *Set(Y, "hic(curve.x*times,curve.y*accel,window,4)")
        *Set(Y2, "")
        *Set(LABEL, "\"HIC_AVG_Accl(\" + curve.label + \",\" + window + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_hicn, curve, window, times, accel)
        *Label("NHTSA HIC Note")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(window, "Window (ms)", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(accel, "Accel conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(false)
        *Set(X, "hic(curve.x*times,curve.y*accel,window,1)")
        *Set(Y, "hic(curve.x*times,curve.y*accel,window,2)")
        *Set(LABEL, "\"HIC(\" + curve.label + \",\" + window + \")\"")
        *CreateNote(true)
        *BeginText()
{mynote = hic(curve.x*times,curve.y*accel,window)}
HIC: {mynote[0]}
T0: {mynote[1]}
Te: {mynote[2]}






        *EndText()
        *Set(NOTE_POS, "curve.x[indexofmax(curve.y)]", "curve.y[indexofmax(curve.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Existing curve")
        *Set(NOTE_CURVE, "curve", "indexofmax(curve.y)")
    *EndDefine()
    *DefinePlotMacro(macro_hicd, curve, window, times, accel)
        *Label("NHTSA HICd Curve")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(window, "Window (ms)", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(accel, "Accel conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "hicd(curve.x*times,curve.y*accel,window,1)")
        *Set(Y, "hicd(curve.x*times,curve.y*accel,window,2)")
        *Set(Y2, "")
        *Set(LABEL, "\"HICd(\" + curve.label + \",\" + window + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_hicdn, curve, window, times, accel)
        *Label("NHTSA HICd Note")
        *Parameter(curve, "Curve (x=sec, y=g)", CURVE)
        *Parameter(window, "Window (ms)", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(accel, "Accel conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(false)
        *Set(X, "hicd(curve.x*times,curve.y*accel,window,1)")
        *Set(Y, "hicd(curve.x*times,curve.y*accel,window,2)")
        *Set(LABEL, "\"HICd(\" + curve.label + \",\" + window + \")\"")
        *CreateNote(true)
        *BeginText()
{mynote = hicd(curve.x*times,curve.y*accel,window)}
HICd: {mynote[0]}
T0: {mynote[1]}
Te: {mynote[2]}






        *EndText()
        *Set(NOTE_POS, "curve.x[indexofmax(curve.y)]", "curve.y[indexofmax(curve.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Existing curve")
        *Set(NOTE_CURVE, "curve", "indexofmax(curve.y)")
    *EndDefine()
    *DefinePlotMacro(macro_max, curve)
        *Label("Maximum Curve")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.x*0+max(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "\"MAX(\" + curve.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_maxn, curve)
        *Label("Maximum Note")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(false)
        *CreateCurve(false)
        *CreateNote(true)
        *BeginText()
Max: {max(curve.y)} @ {curve.x[indexofmax(curve.y)]}






        *EndText()
        *Set(NOTE_POS, "curve.x[indexofmax(curve.y)]", "curve.y[indexofmax(curve.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Existing curve")
        *Set(NOTE_CURVE, "curve", "indexofmax(curve.y)")
    *EndDefine()
    *DefinePlotMacro(macro_min, curve)
        *Label("Minimum Curve")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.x*0+min(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "\"MIN(\" + curve.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_minn, curve)
        *Label("Minimum Note")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(false)
        *CreateCurve(false)
        *CreateNote(true)
        *BeginText()
Min: {min(curve.y)} @ {curve.x[indexofmin(curve.y)]}






        *EndText()
        *Set(NOTE_POS, "curve.x[indexofmin(curve.y)]", "curve.y[indexofmin(curve.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Existing curve")
        *Set(NOTE_CURVE, "curve", "indexofmin(curve.y)")
    *EndDefine()
    *DefinePlotMacro(macro_ttid, curve4, curve8, curve12)
        *Label("TTId Curve")
        *Parameter(curve4, "Rib 4 (y=g)", CURVE)
        *Parameter(curve8, "Rib 8 (y=g)", CURVE)
        *Parameter(curve12, "Spine T12 (y=g)", CURVE)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "{curve4.x[0],curve4.x[numpts(curve4.x)-1]}")
        *Set(Y, "x*0.0+0.5*(max(abs(cat(curve4.y,curve8.y)))+max(abs(curve12.y)))")
        *Set(Y2, "")
        *Set(LABEL, "\"TTId(\" + curve4.label + \",\" + curve8.label + \",\" + curve12.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_ttidn, curve4, curve8, curve12)
        *Label("TTId Note")
        *Parameter(curve4, "Rib 4 (y=g)", CURVE)
        *Parameter(curve8, "Rib 8 (y=g)", CURVE)
        *Parameter(curve12, "Spine T12 (y=g)", CURVE)
        *HideInputCurve(false)
        *CreateCurve(false)
        *CreateNote(true)
        *BeginText()
TTId: {0.5*(max(abs(cat(curve4.y,curve8.y)))+max(abs(curve12.y)))}






        *EndText()
        *Set(NOTE_POS, "curve4.x[indexofmax(curve4.y)]", "curve4.y[indexofmax(curve4.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_tibia05, mx, my, fz)
        *Label("tibia index H05 Curve")
        *Parameter(mx, "Moment-X (Nm)", CURVE)
        *Parameter(my, "Moment-Y (Nm)", CURVE)
        *Parameter(fz, "Force-Z (kN)", CURVE)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "sync3x(mx.x,my.x,fz.x)")
        *Set(Y, "sqrt(lininterp(mx.x,(mx.y*mx.y),x)+lininterp(my.x,(my.y*my.y),x))/115+lininterp(fz.x,abs(fz.y),x)/22.9")
        *Set(Y2, "")
        *Set(LABEL, "\"Tibia5(\" + mx.label + \",\" + my.label + \",\" + fz.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_tibia05n, mx, my, fz)
        *Label("Tibia index H05 Note")
        *Parameter(mx, "Moment-X (Nm)", CURVE)
        *Parameter(my, "Moment-Y (Nm)", CURVE)
        *Parameter(fz, "Force-Z (kN)", CURVE)
        *HideInputCurve(false)
        *CreateCurve(false)
        *CreateNote(true)
        *BeginText()
{x=sync3x(mx.x,my.x,fz.x)}
Tibia Index H05: {max(sqrt(lininterp(mx.x,(mx.y*mx.y),x)+lininterp(my.x,(my.y*my.y),x))/115+lininterp(fz.x,abs(fz.y),x)/22.9)}






        *EndText()
        *Set(NOTE_POS, "mx.x[indexofmax(mx.y)]", "mx.y[indexofmax(mx.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_tibia50, mx, my, fz)
        *Label("tibia index H50 Curve")
        *Parameter(mx, "Moment-X (Nm)", CURVE)
        *Parameter(my, "Moment-Y (Nm)", CURVE)
        *Parameter(fz, "Force-Z (kN)", CURVE)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "sync3x(mx.x,my.x,fz.x)")
        *Set(Y, "sqrt(lininterp(mx.x,(mx.y*mx.y),x)+lininterp(my.x,(my.y*my.y),x))/225+lininterp(fz.x,abs(fz.y),x)/35.9")
        *Set(Y2, "")
        *Set(LABEL, "\"Tibia50(\" + mx.label + \",\" + my.label + \",\" + fz.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_tibia50n, mx, my, fz)
        *Label("Tibia index H50 Note")
        *Parameter(mx, "Moment-X (Nm)", CURVE)
        *Parameter(my, "Moment-Y (Nm)", CURVE)
        *Parameter(fz, "Force-Z (kN)", CURVE)
        *HideInputCurve(false)
        *CreateCurve(false)
        *CreateNote(true)
        *BeginText()
{x=sync3x(mx.x,my.x,fz.x)}
Tibia Index H50: {max(sqrt(lininterp(mx.x,(mx.y*mx.y),x)+lininterp(my.x,(my.y*my.y),x))/225+lininterp(fz.x,abs(fz.y),x)/35.9)}






        *EndText()
        *Set(NOTE_POS, "mx.x[indexofmax(mx.y)]", "mx.y[indexofmax(mx.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_tibia95, mx, my, fz)
        *Label("tibia index H95 Curve")
        *Parameter(mx, "Moment-X (Nm)", CURVE)
        *Parameter(my, "Moment-Y (Nm)", CURVE)
        *Parameter(fz, "Force-Z (kN)", CURVE)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "sync3x(mx.x,my.x,fz.x)")
        *Set(Y, "sqrt(lininterp(mx.x,(mx.y*mx.y),x)+lininterp(my.x,(my.y*my.y),x))/307+lininterp(fz.x,abs(fz.y),x)/44.2")
        *Set(Y2, "")
        *Set(LABEL, "\"Tibia95(\" + mx.label + \",\" + my.label + \",\" + fz.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_tibia95n, mx, my, fz)
        *Label("Tibia index H95 Note")
        *Parameter(mx, "Moment-X (Nm)", CURVE)
        *Parameter(my, "Moment-Y (Nm)", CURVE)
        *Parameter(fz, "Force-Z (kN)", CURVE)
        *HideInputCurve(false)
        *CreateCurve(false)
        *CreateNote(true)
        *BeginText()
{x=sync3x(mx.x,my.x,fz.x)}
Tibia Index H95: {max(sqrt(lininterp(mx.x,(mx.y*mx.y),x)+lininterp(my.x,(my.y*my.y),x))/307+lininterp(fz.x,abs(fz.y),x)/44.2)}






        *EndText()
        *Set(NOTE_POS, "mx.x[indexofmax(mx.y)]", "mx.y[indexofmax(mx.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_vc, curve, torso, times, displ, sf)
        *Label("V*C Curve")
        *Parameter(curve, "Curve (x=sec, y=m)", CURVE)
        *Parameter(torso, "Torso width (m)", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(displ, "Displ conv.", SCALAR)
        *Parameter(sf, "Scale factor", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "sf*displ*curve.y*(derivative(curve.x*times,curve.y*displ)/torso)")
        *Set(Y2, "")
        *Set(LABEL, "\"V*C(\" + curve.label + \",\" + torso + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_vcn, curve, torso, times, displ, sf)
        *Label("V*C Note")
        *Parameter(curve, "Curve (x=sec, y=m)", CURVE)
        *Parameter(torso, "Torso width (m)", SCALAR)
        *Parameter(times, "Time conv.", SCALAR)
        *Parameter(displ, "Displ conv.", SCALAR)
        *Parameter(sf, "Scale factor", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(false)
        *CreateNote(true)
        *BeginText()
V*C: {max(sf*displ*curve.y*(derivative(curve.x*times,curve.y*displ)/torso))}






        *EndText()
        *Set(NOTE_POS, "curve.x[indexofmax(curve.y)]", "curve.y[indexofmax(curve.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_nijn, xForce, zForce, yMoment, dumtyp, concorr, forcecon, momentcon)
        *Label("Nij Note")
        *Parameter(xForce, "xForce(N)", CURVE)
        *Parameter(zForce, "zForce(N)", CURVE)
        *Parameter(yMoment, "yMoment(Nm)", CURVE)
        *Parameter(dumtyp, "Dummy(1-CRABI 2-3yr 3-6yr 4-5th 5-50th 6-95th)", SCALAR)
        *Parameter(concorr, "Condyle Corr. (0-No 1-Yes)", SCALAR)
        *Parameter(forcecon, "Force conv.", SCALAR)
        *Parameter(momentcon, "Moment conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(false)
        *Set(LABEL, "")
        *CreateNote(true)
        *BeginText()
{mynote = nij(xForce.y * forcecon,zForce.y * forcecon,yMoment.y * momentcon,dumtyp,5,concorr,0)}
Ntf: {mynote[0]}
Nte: {mynote[1]}
Ncf: {mynote[2]}
Nce: {mynote[3]}







        *EndText()
        *Set(NOTE_POS, "zForce.x[indexofmax(zForce.y)]", "zForce.y[indexofmax(zForce.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_nte, xForce, zForce, yMoment, dumtyp, concorr, forcecon, momentcon)
        *Label("Nte Curve")
        *Parameter(xForce, "xForce(N)", CURVE)
        *Parameter(zForce, "zForce(N)", CURVE)
        *Parameter(yMoment, "yMoment(Nm)", CURVE)
        *Parameter(dumtyp, "Dummy(1-CRABI 2-3yr 3-6yr 4-5th 5-50th 6-95th)", SCALAR)
        *Parameter(concorr, "Condyle Corr. (0-No 1-Yes)", SCALAR)
        *Parameter(forcecon, "Force conv.", SCALAR)
        *Parameter(momentcon, "Moment conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "sync3x(xForce.x,zForce.x,yMoment.x)")
        *Set(Y, "nij(xForce.y * forcecon,zForce.y * forcecon,yMoment.y * momentcon,dumtyp,2,concorr,0)")
        *Set(Y2, "")
        *Set(LABEL, "\"Nte(\" + xForce.label + \",\" + zForce.label + \",\" + yMoment.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_ntf, xForce, zForce, yMoment, dumtyp, concorr, forcecon, momentcon)
        *Label("Ntf Curve")
        *Parameter(xForce, "xForce(N)", CURVE)
        *Parameter(zForce, "zForce(N)", CURVE)
        *Parameter(yMoment, "yMoment(Nm)", CURVE)
        *Parameter(dumtyp, "Dummy(1-CRABI 2-3yr 3-6yr 4-5th 5-50th 6-95th)", SCALAR)
        *Parameter(concorr, "Condyle Corr. (0-No 1-Yes)", SCALAR)
        *Parameter(forcecon, "Force conv.", SCALAR)
        *Parameter(momentcon, "Moment conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "sync3x(xForce.x,zForce.x,yMoment.x)")
        *Set(Y, "nij(xForce.y * forcecon,zForce.y * forcecon,yMoment.y * momentcon,dumtyp,1,concorr,0)")
        *Set(Y2, "")
        *Set(LABEL, "\"Ntf(\" + xForce.label + \",\" + zForce.label + \",\" + yMoment.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_nce, xForce, zForce, yMoment, dumtyp, concorr, forcecon, momentcon)
        *Label("Nce Curve")
        *Parameter(xForce, "xForce(N)", CURVE)
        *Parameter(zForce, "zForce(N)", CURVE)
        *Parameter(yMoment, "yMoment(Nm)", CURVE)
        *Parameter(dumtyp, "Dummy(1-CRABI 2-3yr 3-6yr 4-5th 5-50th 6-95th)", SCALAR)
        *Parameter(concorr, "Condyle Corr. (0-No 1-Yes)", SCALAR)
        *Parameter(forcecon, "Force conv.", SCALAR)
        *Parameter(momentcon, "Moment conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "sync3x(xForce.x,zForce.x,yMoment.x)")
        *Set(Y, "nij(xForce.y * forcecon,zForce.y * forcecon,yMoment.y * momentcon,dumtyp,4,concorr,0)")
        *Set(Y2, "")
        *Set(LABEL, "\"Nce(\" + xForce.label + \",\" + zForce.label + \",\" + yMoment.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_ncf, xForce, zForce, yMoment, dumtyp, concorr, forcecon, momentcon)
        *Label("Ncf Curve")
        *Parameter(xForce, "xForce(N)", CURVE)
        *Parameter(zForce, "zForce(N)", CURVE)
        *Parameter(yMoment, "yMoment(Nm)", CURVE)
        *Parameter(dumtyp, "Dummy(1-CRABI 2-3yr 3-6yr 4-5th 5-50th 6-95th)", SCALAR)
        *Parameter(concorr, "Condyle Corr. (0-No 1-Yes)", SCALAR)
        *Parameter(forcecon, "Force conv.", SCALAR)
        *Parameter(momentcon, "Moment conv.", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "sync3x(xForce.x,zForce.x,yMoment.x)")
        *Set(Y, "nij(xForce.y * forcecon,zForce.y * forcecon,yMoment.y * momentcon,dumtyp,3,concorr,0)")
        *Set(Y2, "")
        *Set(LABEL, "\"Ncf(\" + xForce.label + \",\" + zForce.label + \",\" + yMoment.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_cti, aclip, tscl, dclip, dscl, aint, dint)
        *Label("CTI Curve")
        *Parameter(aclip, "chest res accel (x=sec y=g)", CURVE)
        *Parameter(tscl, "time scale", SCALAR)
        *Parameter(dclip, "chest deflection (y=mm)", CURVE)
        *Parameter(dscl, "length scale", SCALAR)
        *Parameter(aint, "accel intercept", SCALAR)
        *Parameter(dint, "deflection intercept", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(true)
        *Set(X, "sync2x(aclip.x,dclip.x)")
        *Set(Y, "(x*0)+(clip(tscl*aclip.x,aclip.y,3)[0])/aint+dscl*max(dclip.y)/dint")
        *Set(Y2, "")
        *Set(LABEL, "\"CTI(\" + aclip.label + \",\" + dclip.label + \")\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_ctin, aclip, tscl, dclip, dscl, aint, dint)
        *Label("CTI Note")
        *Parameter(aclip, "chest res accel (x=sec y=g)", CURVE)
        *Parameter(tscl, "time scale", SCALAR)
        *Parameter(dclip, "chest deflection (y=mm)", CURVE)
        *Parameter(dscl, "length scale", SCALAR)
        *Parameter(aint, "accel intercept", SCALAR)
        *Parameter(dint, "deflection intercept", SCALAR)
        *HideInputCurve(false)
        *CreateCurve(false)
        *CreateNote(true)
        *BeginText()
CTI: {max((clip(tscl*aclip.x,aclip.y,3)[0])/aint+dscl*max(dclip.y)/dint)}






        *EndText()
        *Set(NOTE_POS, "aclip.x[indexofmax(aclip.y)]", "aclip.y[indexofmax(aclip.y)] / 2")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_yconst, start, end, value)
        *Label("y=constant")
        *Parameter(start, "X-start", SCALAR)
        *Parameter(end, "X-end", SCALAR)
        *Parameter(value, "Y-value", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "{start,end}")
        *Set(Y, "{value,value}")
        *Set(Y2, "")
        *Set(LABEL, "\"Y_const= \"+ value")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_xconst, start, end, value)
        *Label("x=constant")
        *Parameter(start, "Y-start", SCALAR)
        *Parameter(end, "Y-end", SCALAR)
        *Parameter(value, "X-value", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "{value,value}")
        *Set(Y, "{start,end}")
        *Set(Y2, "")
        *Set(LABEL, "\"X_const= \"+ value")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_offminy, curve, scale)
        *Label("offset miny")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(scale, "Y scale", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y+scale*min(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_minyoffset\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_offmaxy, curve, scale)
        *Label("offset maxy")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(scale, "Y scale", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y+scale*max(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_maxyoffset\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_offavg, curve, scale, lowx, highx)
        *Label("offset average")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(scale, "Y scale", SCALAR)
        *Parameter(lowx, "X start", SCALAR)
        *Parameter(highx, "X end  ", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "curve.y+(sum(lininterp(trim_depvect(x,curve.y),curve.y,max({lowx,min(trim_depvect(x,curve.y))}):min({highx,max(trim_depvect(x,curve.y))}):(x[1]-x[0])))/numpts(max({lowx,min(trim_depvect(x,curve.y))}):min({highx,max(trim_depvect(x,curve.y))}):(x[1]-x[0]))*scale)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_avgoffset\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_dfilter, curve, firc, irc)
        *Label("impulse response")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(firc, "FIR Coeff's", SCALAR)
        *Parameter(irc, "IR Coeff's", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "irfilter(curve.y,firc,irc)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_irfilter\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reg1, curve)
        *Label("linear fit")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "polyfit(trim_depvect(curve.x,curve.y),curve.y,1)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_ist degree\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reg2, curve)
        *Label("quadratic fit")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "polyfit(trim_depvect(curve.x,curve.y),curve.y,2)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_2nd degree\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reg3, curve)
        *Label("cubic fit")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "polyfit(trim_depvect(curve.x,curve.y),curve.y,3)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_3rd degree\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reg4, curve)
        *Label("4th degree")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "polyfit(trim_depvect(curve.x,curve.y),curve.y,4)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_4th degree\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reg5, curve)
        *Label("5th degree")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "polyfit(trim_depvect(curve.x,curve.y),curve.y,5)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_5th degree\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reg6, curve)
        *Label("6th degree")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "polyfit(trim_depvect(curve.x,curve.y),curve.y,6)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_6th degree\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reg7, curve)
        *Label("7th degree")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "polyfit(trim_depvect(curve.x,curve.y),curve.y,7)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_7th degree\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reg8, curve)
        *Label("8th degree")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "polyfit(trim_depvect(curve.x,curve.y),curve.y,8)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_8th degree\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reg9, curve)
        *Label("9th degree")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "polyfit(trim_depvect(curve.x,curve.y),curve.y,9)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_9th degree\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reg10, curve)
        *Label("10th degree")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "polyfit(trim_depvect(curve.x,curve.y),curve.y,10)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_10 degree\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_regexp, curve)
        *Label("exponential")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "expfit(trim_depvect(curve.x,curve.y),curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_exponential\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reglog, curve)
        *Label("logarithmic")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "lnfit(trim_depvect(curve.x,curve.y),curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_ln\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_regpower, curve)
        *Label("power")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "powfit(trim_depvect(curve.x,curve.y),curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_power\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_reginv, curve)
        *Label("inverse")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "Invfit(trim_depvect(curve.x,curve.y),curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_inverse\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_raverage, curve)
        *Label("running average")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "raverage(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_raverage\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_rmedian, curve)
        *Label("running median")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "rmedian(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_rmedian\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_rmaximum, curve)
        *Label("running maximum")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "rmax(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_rmax\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_rminimum, curve)
        *Label("running minimum")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "rmin(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_rmin\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_rstddev, curve)
        *Label("running stddev")
        *Parameter(curve, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "rstddev(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_rstddev\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_splines, curve1, curve2)
        *Label("spline")
        *Parameter(curve1, "Vector", CURVE)
        *Parameter(curve2, "Vector", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve2.x")
        *Set(Y, "spline(trim_depvect(curve1.x,curve1.y),curve1.y,curve2.x)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_spline\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fft1, curve)
        *Label("rectangular fft")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "freq(curve.x)")
        *Set(Y, "fftmag(curve.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_fftmag\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fft2, curve)
        *Label("hanning fft")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "freq(curve.x)")
        *Set(Y, "fftmag(hanning(curve.y))")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_fftmag_hanning\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fft3, curve)
        *Label("welch fft")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "freq(curve.x)")
        *Set(Y, "fftmag(welch(curve.y))")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_fftmag_welch\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fft4, curve)
        *Label("hamming fft")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "freq(curve.x)")
        *Set(Y, "fftmag(hamming(curve.y))")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_fftmag_hamming\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fft5, curve)
        *Label("blackman fft")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "freq(curve.x)")
        *Set(Y, "fftmag(blackman(curve.y))")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_fftmag_blackman\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fft6, curve)
        *Label("parzen fft")
        *Parameter(curve, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "freq(curve.x)")
        *Set(Y, "fftmag(parzen(curve.y))")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_fftmag_parzen\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_ifft1, curve1, curve2)
        *Label("inverse fft")
        *Parameter(curve1, "Curve", CURVE)
        *Parameter(curve2, "Curve", CURVE)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "freq(curve1.x)")
        *Set(Y, "ifft(curve1.y,curve2.y)")
        *Set(Y2, "")
        *Set(LABEL, "curve1.label + curve2.label+ \"_ifft_real\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_sample, curve, freq)
        *Label("resample")
        *Parameter(curve, "Curve", CURVE)
        *Parameter(freq, "New frequency", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "(min(curve.x)):(max(curve.x[(numpts(curve.y)-1)])):(1/freq)")
        *Set(Y, "lininterp(trim_depvect(curve.x,curve.y),curve.y,x)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_resample_\" + freq + \"Hz\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_histoa, curve, cells)
        *Label("histogram abs")
        *Parameter(curve, "Vector", CURVE)
        *Parameter(cells, "Number of cells", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "histogram(curve.y,cells,1)")
        *Set(Y, "histogram(curve.y,cells,2)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_histogram\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_histor, curve, cells)
        *Label("histogram rel")
        *Parameter(curve, "Vector", CURVE)
        *Parameter(cells, "Number of cells", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "histogram(curve.y,cells,1)")
        *Set(Y, "histogram(curve.y,cells,3)")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_histogram\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
    *DefinePlotMacro(macro_fdd, curve, times)
        *Label("frequency domain diff")
        *Parameter(curve, "Curve (time = sec)", CURVE)
        *Parameter(times, "Time conv.", SCALAR)
        *HideInputCurve(true)
        *CreateCurve(true)
        *Set(X, "curve.x")
        *Set(Y, "ifft(-1*fftimag(curve.y)*freq(times*trim_depvect(curve.x,curve.y)),fftreal(curve.y)*freq(times*trim_depvect(curve.x,curve.y))-mean(curve.y))")
        *Set(Y2, "")
        *Set(LABEL, "curve.label + \"_ifft\"")
        *CreateNote(false)
        *BeginText()
Note





        *EndText()
        *Set(NOTE_POS, "0", "0")
        *Set(NOTE_ATTACHMENT, "Window")
    *EndDefine()
*EndPlotMacros()
{templex_on}
